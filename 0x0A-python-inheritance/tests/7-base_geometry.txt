7-base_geometry doctest
======================================
tests the integer_validator method

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Normal case:
>>> bg.integer_validator("my_int", 12)

Case integer is negative:
>>> bg.integer_validator("my_int", -12)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

Case integer is zero:
>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

Case value is empty
>>> bg.integer_validator("my_int", None)
Traceback (most recent call last):
TypeError: my_int must be an integer

Case value is not an integer(list):
>>> bg.integer_validator("my_int", [1, 2, 3])
Traceback (most recent call last):
TypeError: my_int must be an integer

Case value is not an integer(string):
>>> bg.integer_validator("my_int", "[1, 2, 3]")
Traceback (most recent call last):
TypeError: my_int must be an integer

Case value is not an integer(tuple):
>>> bg.integer_validator("my_int", (1, 2, 3))
Traceback (most recent call last):
TypeError: my_int must be an integer

Case value is not an integer(dict):
>>> bg.integer_validator("my_int", {1, 2, 3})
Traceback (most recent call last):
TypeError: my_int must be an integer

Case value is not an integer(boolean):
>>> bg.integer_validator("my_int", True)
Traceback (most recent call last):
TypeError: my_int must be an integer

Case string is empty
>>> bg.integer_validator("", 2)

Case empty parameters
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Case value is empty:
>>> bg.integer_validator("name")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Call area method:
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented


# doctest: +REPORT_NDIFF, +NORMALIZE_WHITESPACE