Base geometry module doctest
=====================================================
Test the integer_validator method

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Normal test case
>>> bg.integer_validator("name", 12)

Case value is negative:
>>> bg.integer_validator("name", -12)
Traceback (most recent call last):
ValueError: name must be greater than 0

Case value is equal to zero:
>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
ValueError: name must be greater than 0

Case value is not a int value(string):
>>> bg.integer_validator("name", "paulina")
Traceback (most recent call last):
TypeError: name must be an integer

Case value is not a int value(list):
>>> bg.integer_validator("name", [2, 3])
Traceback (most recent call last):
TypeError: name must be an integer

Case value is not a int value(tuple):
>>> bg.integer_validator("name", (2, 3))
Traceback (most recent call last):
TypeError: name must be an integer

Case value is not a int value(dict):
>>> bg.integer_validator("name", {2, 3})
Traceback (most recent call last):
TypeError: name must be an integer

Case value is not a int value(boolean):
>>> bg.integer_validator("name", True)
Traceback (most recent call last):
TypeError: name must be an integer


Case value is None:
>>> bg.integer_validator("name", None)
Traceback (most recent call last):
TypeError: name must be an integer

Case empty parameters
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Case value is empty:
>>> bg.integer_validator("name")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Call area method:
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented


# doctest: +REPORT_NDIFF, +NORMALIZE_WHITESPACE
